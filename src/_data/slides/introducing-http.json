{"title":"入門 HTTP","pages":[{"image":"/images/slides/introducing-http/s-01.png","width":720,"height":540,"links":[],"text":"入門 HTTP"},{"image":"/images/slides/introducing-http/s-02.png","width":720,"height":540,"links":[],"text":"自己紹介\n\n\n\n\n\n\n\n\n\n\n\n  @_honai"},{"image":"/images/slides/introducing-http/s-03.png","width":720,"height":540,"links":[],"text":"HTTP、使ってますか"},{"image":"/images/slides/introducing-http/s-04.png","width":720,"height":540,"links":[],"text":"HTTP: Hyper T  ext ransfer Protocol\n\n\n          この画像が\n          ほしいです\n                   リクエスト\n\n\n             レスポンス\n                      どうぞ\n  クライアント                            サーバー\n(スマホ、PC、サーバー)                      (サーバー)\n\n\n\n\n\n\n\n https://youtube.com/"},{"image":"/images/slides/introducing-http/s-05.png","width":720,"height":540,"links":[],"text":"HTTPの歴史\n\n\n\n\n        ← 現役！"},{"image":"/images/slides/introducing-http/s-06.png","width":720,"height":540,"links":[],"text":"Webアプリをつくる人にとってのHTTP"},{"image":"/images/slides/introducing-http/s-07.png","width":720,"height":540,"links":[],"text":"“再”入門 HTTP\n\n\n\n\n\n\n\n\n\n\n\n  Webを支えるHTTPの進化を知ってほしい！"},{"image":"/images/slides/introducing-http/s-08.png","width":720,"height":540,"links":[],"text":"トークの内容"},{"image":"/images/slides/introducing-http/s-09.png","width":720,"height":540,"links":[],"text":"HTTPの基本要素            ― リクエスト\n\n\n\n  GET /index.html HTTP/1.1     メソッドいろいろ\n  Host: www.example.com        • GET\n  Accept: */*                  • HEAD\n                               • POST\n                               • PUT\n\n                               • DELETE\n GET /index.html HTTP/1.1      • CONNECT\nメソッド      パス                   • OPTIONS\n\n\n Host: www.example.com\nフィールド名1   値1\n\n Accept: */*      ヘッダー\nフィールド名2 値2"},{"image":"/images/slides/introducing-http/s-10.png","width":720,"height":540,"links":[],"text":"HTTPの基本要素                    ― レスポンス\n\n\n\n HTTP/1.1 200 OK\n Content-Type: text/html; charset=UTF-8\n Content-Length: 1256\n\n <html>\n   <head>\n     <title>Example Domain</title>       500 Internal Server Error\n     ...\n\n\n HTTP/1.1 200 OK\n\n             ステータス\n <html>\n                                                404 Not Found\n    <head>                 ボディ\n      <title>..."},{"image":"/images/slides/introducing-http/s-11.png","width":720,"height":540,"links":[],"text":"HTTP/1.x\n\n\nTCPを使ったテキストベースのシンプルなプロトコル"},{"image":"/images/slides/introducing-http/s-12.png","width":720,"height":540,"links":[],"text":"HTTP/1.0 と HTTP/1.1\n\n\n\n\n               TCPのコネクション"},{"image":"/images/slides/introducing-http/s-13.png","width":720,"height":540,"links":[],"text":"HTTP/1.0 と HTTP/1.1\n\n\n\n\n\n\n                           TCP 03 a7 1e TCP 03 a7 1e TCP 03 a7 1e 3c\n\n                                         TCPのコネクション\n\n\n\n   0111 1011 1101\n   1011 0001 1001\n   1010 1010 0101\n   0000 0001 0101\n\n\n                        文字列をエンコード\n\n   GET / HTTP/1.0"},{"image":"/images/slides/introducing-http/s-14.png","width":720,"height":540,"links":[],"text":"HTTP/1.0 と HTTP/1.1\n\n\n\n\n\n\n\n\n                                         TCPのコネクション\n\n                                      03 a7 1eTCP  03 a7 1eTCP   03 a7 1TCPc\n\n\n   0111 1011 1101\n   1011 0001 1001\n   1010 1010 0101\n   0000 0001 0101\n\n                          バイナリをデコードするとレスポンスの文字列になる\n\n HTTP/1.0 200 OK\n Content-Type: te…\n\n <html>\n\n\n\n\n\n                 テキストベースのシンプルなプロトコル"},{"image":"/images/slides/introducing-http/s-15.png","width":720,"height":540,"links":[],"text":"HTTP/1.x の課題   ― 毎回接続すると時間がかかる\n\n\n\n\n  時間\n\n     接続処理\n\n\n\n\n\n\n\n\n     切断処理\n\n\n\n       TCP通信は接続/切断に1RTTかかる"},{"image":"/images/slides/introducing-http/s-16.png","width":720,"height":540,"links":[],"text":"HTTP/1.x の課題    ― 毎回接続すると時間がかかる\n\n\n\n時間\n\n        接続処理\n  リクエスト1\n        切断処理\n\n        接続処理\n  リクエスト2\n\n        切断処理\n        接続処理\n\n  リクエスト3\n        切断処理\n\n\n\n       リクエスト毎に接続/切断するので遅い"},{"image":"/images/slides/introducing-http/s-17.png","width":720,"height":540,"links":[],"text":"Keep Alive\n\n\n\n時間\n         接続処理\n\n  リクエスト1\n\n  リクエスト2\n\n\n  リクエスト3\n\n\n\n\n   (タイムアウト等で切断)\n\n\n      TCPの接続をつなぎっぱなしにして高速化"},{"image":"/images/slides/introducing-http/s-18.png","width":720,"height":540,"links":[],"text":"Keep Aliveの効果を見てみましょう\n\n\n\n\n  // nginx.conf                              nginxでサーバーを2つ立てる\n  server_1 {\n\n      listen               8001;\n      keepalive_timeout    0;\n  }\n\n\n  server_2 {\n      listen               8002;\n\n      keepalive_timeout    65;\n  }\n\n\n\n                                             iframeで両方を読み込む\n  // index.html\n  <iframe src=\"http://localhost:8001\" />\n  <iframe src=\"http://localhost:8002\" />"},{"image":"/images/slides/introducing-http/s-19.png","width":720,"height":540,"links":[],"text":""},{"image":"/images/slides/introducing-http/s-20.png","width":720,"height":540,"links":[],"text":"TLS と HTTP"},{"image":"/images/slides/introducing-http/s-21.png","width":720,"height":540,"links":[],"text":"TLS: T   ransport Layer Security\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                          HTTP\n                  HTTP                     TLS\n\n                   TCP                     TCP\n\n                 http://                 https://"},{"image":"/images/slides/introducing-http/s-22.png","width":720,"height":540,"links":[],"text":"TLSとハンドシェイク\n\n\n\n                                      TLS1.2 フルハンドシェイク\n\n\n             Client Hello\n\n                                                                                       Server Hello\n                                                                                       Certificate\n                                                                                       Server Key Exchange\n     Client Key Exchange\n     Change Cipher Spec\n                Finished\n                                                                                       Change Cipher Spec\n                                                                                       Finished\n\n\n\n\n\n\n\n               初回接続：2RTT（上図）、再接続：1RTT\n\n\n                  TLSで通信するにはハンドシェイクが必要"},{"image":"/images/slides/introducing-http/s-23.png","width":720,"height":540,"links":[],"text":"TLS 1.3 ― 2018年にRFC 8446として公開\n\n\n  フルハンドシェイク: 1RTT           再接続: 0RTT\n\n\n\n\n\n\n\n\n\n\n\n\n\n        HTTPのレイテンシ削減につながった"},{"image":"/images/slides/introducing-http/s-24.png","width":720,"height":540,"links":[],"text":"HTTP/2\n\n\n仮想的に多重化されたバイナリベースのプロトコル"},{"image":"/images/slides/introducing-http/s-25.png","width":720,"height":540,"links":[],"text":"HTTP/1.x の課題 ― 輻輳制御の効率が悪い\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                  引用した図を削除しています"},{"image":"/images/slides/introducing-http/s-26.png","width":720,"height":540,"links":[],"text":"HTTP/1.x の課題    ― HTTP HoLブロッキング\n\n\nHoL (Head of Line) ブロッキング\n待ち行列の先頭が後続を止める\n\n              リクエストA\n\n\n\n\n              リクエストB\n\n\n              リクエストC\n\n\n\n\n            1つの（重い）リクエストが\n        他のリクエストをブロックしてしまう"},{"image":"/images/slides/introducing-http/s-27.png","width":720,"height":540,"links":[],"text":"HTTP/2              ― バイナリベース\n\n\n\n\n\n\n                               FRAME        FRAME        FRAME\n\n                                         TCP・TLSで接続\n\n                                         FRAME        FRAME       FRAME\n\n\n\n              0                    1                    2                    3\n              0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n             +-----------------------------------------------+\n             |                  Length (24)                    |\n             +---------------+---------------+---------------+\n             |   Type (8)     |   Flags (8)    |\n             +-+-------------+---------------+-------------------------------+\n             |R|                  Stream Identifier (31)                        |\n             +=+=============================================================+\n             |                    Frame Payload (0...)                        ...\n             +---------------------------------------------------------------+\n\n\n                                   HTTP/2 Frame Layout\n\n\n\n                  HTTPをフレームに分解して送受信する"},{"image":"/images/slides/introducing-http/s-28.png","width":720,"height":540,"links":[],"text":"HTTP/2             ― ストリームによる多重化\n\n\n                      FRAME       FRAME        FRAME       FRAME\n\n                                   TCP・TLSで接続\n\n                                   FRAME       FRAME       FRAME       FRAME\n\n\n\n\nストリーム1                                             FRAME       FRAME               ストリーム1\n                         FRAME\n\n\n\nストリーム2                        FRAME                                                ストリーム2\n                                                            FRAME\n\n\n\n                               FRAME\nストリーム3                                                   FRAME         FRAME       ストリーム3\n\n\n\n                            ストリームIDを振ることで\n\n                        仮想的に通信路を多重化する"},{"image":"/images/slides/introducing-http/s-29.png","width":720,"height":540,"links":[],"text":"HTTP/2 ― 輻輳制御が効率的\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   引用した図を削除しています\n\n     1本のTCP接続で帯域を最大限に使える"},{"image":"/images/slides/introducing-http/s-30.png","width":720,"height":540,"links":[],"text":"HTTP/2   ― HTTP HoLブロッキングを解消\n\n\n\n                        ストリームで並列化\n\n                        非同期\n\n\n               ストリーム1                  ストリーム1\n                            FRAMEFRAME\n                     FRAME\n\n\n               ストリーム2           FRAME  ストリーム2\n\n\n\n               ストリーム3           FRAME  ストリーム3"},{"image":"/images/slides/introducing-http/s-31.png","width":720,"height":540,"links":[],"text":"HTTP/2   ― HTTP HoLブロッキングを解消\n\n\n\n                        ストリームで並列化\n\n                        非同期\n\n\n               ストリーム1                  ストリーム1\n                            FRAMEFRAME\n                     FRAME\n\n\n               ストリーム2   FRAME          ストリーム2\n\n\n\n               ストリーム3           FRAME  ストリーム3"},{"image":"/images/slides/introducing-http/s-32.png","width":720,"height":540,"links":[],"text":"HTTP/2   ― HTTP HoLブロッキングを解消\n\n\n\n                        ストリームで並列化\n                        非同期\n\n\n\n               ストリーム1       FRAMEFRAME ストリーム1\n                     FRAME\n\n\n               ストリーム2   FRAME          ストリーム2\n\n\n\n               ストリーム3                  ストリーム3\n                        FRAME\n\n\n\n\n           リクエストは他のリクエストに\n\n                ブロックされない"},{"image":"/images/slides/introducing-http/s-33.png","width":720,"height":540,"links":[],"text":"HTTP/2 ― HTTPヘッダーの圧縮"},{"image":"/images/slides/introducing-http/s-34.png","width":720,"height":540,"links":[],"text":"HTTP/2の課題 ― TCP HoLブロッキング\n\n\n\n\n   アプリケーション        OS\n    （ブラウザ）       (TCPソケット)\n\n      FRAME       FRAME\n      FRAME       FRAME\n\n      FRAME       FRAME\n      FRAME       FRAME\n                                ×\n\n                  FRAME\n                  FRAME\n\n ロスしたのは 青 のストリーム                           再送\n\n 緑 や橙 のストリームには関係ないが\n TCPの実装上、青 が再送されるまで\n\n アプリケーションは処理できない\n\n            TCPのパケットロス/再送が\n\n       すべてのストリームをブロックしてしまう"},{"image":"/images/slides/introducing-http/s-35.png","width":720,"height":540,"links":[],"text":"HTTP/2の課題 ― 接続までの時間\n\n\n            TCP接続処理\n\n\n\n\n\n\n\n\n\n\n\n\n\n    TCPとTLSのハンドシェイクで時間がかかる"},{"image":"/images/slides/introducing-http/s-36.png","width":720,"height":540,"links":[],"text":"HTTP/2の課題\n\n\n\n\n\n\n   HTTPのレイヤーではどうにもならない！\n\n\n\n\nGoogle 「TCPやめて新しいプロトコル作るわ」"},{"image":"/images/slides/introducing-http/s-37.png","width":720,"height":540,"links":[],"text":"QUIC\n\n\nUDPベースの多重化されたセキュアな転送プロトコル"},{"image":"/images/slides/introducing-http/s-38.png","width":720,"height":540,"links":[],"text":"ChromeでGoogleのサービスにアクセス"},{"image":"/images/slides/introducing-http/s-39.png","width":720,"height":540,"links":[],"text":"QUIC:    UDPベースの多重化されたセキュアな転送プロトコル\n\n\n\n           HTTP/2                    HTTP/2 *\n            TLS\n                                  QUIC     暗号化\n\n            TCP                       UDP\n\n             IP                        IP\n\n           HTTP/2                Google版QUIC +\n                                        HTTP/2*\n\n                                * HTTP/2の機能抜粋版"},{"image":"/images/slides/introducing-http/s-40.png","width":720,"height":540,"links":[],"text":"なぜUDPを使うか\n\n\n\n        UDPacUDPacUDPac508\n\n\n\n                 TCP         UDP\n\n   通信の方向         双方向       相手に送るだけ\n  誤り/不達の検出       できる        できない\n\n   データの順序       保証される      保証されない\n    輻輳制御         ある          ない\n\n\n\n   機能がシンプルな代わりに、（届けば） 到達速度がはやい\n\n   UDPはTCPと同じよう普及している\n\n\n     UDPを利用し、TCPよりも適したプロトコルを\n\n          （ユーザー空間に）構築する"},{"image":"/images/slides/introducing-http/s-41.png","width":720,"height":540,"links":[],"text":"QUIC:       UDPベースの多重化されたセキュアな転送プロトコル\n\n\n\n                    FRAME      FRAME      FRAME      FRAME\n                   QUIC       QUIC       QUIC       QUIC\n                   UDP        UDP        UDP        UDP\n\n\n                           FRAME      FRAME      FRAME      FRAME\n                            QUIC       QUIC       QUIC       QUIC\n                            UDP        UDP        UDP        UDP\n\n\n\n\n\n   QUIC                                                                   QUIC\nコネクション                                                                 コネクション\n\n                        FRAME\n ストリーム1                                                                 ストリーム1\n                                       FRAME      FRAME\n                          FRAME\n ストリーム2                                                                 ストリーム2\n                                                  FRAME\n\n                                          FRAME\n ストリーム3                 FRAME                                           ストリーム3"},{"image":"/images/slides/introducing-http/s-42.png","width":720,"height":540,"links":[],"text":"QUIC ― HoLブロッキングがない\n\n\n\n      アプリケーション                            OS\n\n         （ブラウザ）                      (UDPソケット)\n\n            FRAME                       FRAME\n\n            FRAME                       FRAME\n            FRAME                       FRAME\n\n            FRAME                       FRAME\n                                                                     ×\n            FRAME\n            FRAME                       FRAME\n                                        FRAME\n\n                                                                                             再送\n\n\n\n\n\n\n\n                            パケットロスが起きても\n\n                他のストリームの処理をブロックしない"},{"image":"/images/slides/introducing-http/s-43.png","width":720,"height":540,"links":[],"text":"QUIC ― 0-RTT\n\n\n\n\n\n\n\n\n\n\n\n\n\n    TCP+TLSの場合は、それぞれにハンドシェイクが必要\n    QUICはトランスポートとセキュリティを統合したプロトコルであり、\n    再接続の場合、真に0-RTTで暗号化されたデータを送信可能\n\n          最短 0-RTT でデータを送れる"},{"image":"/images/slides/introducing-http/s-44.png","width":720,"height":540,"links":[],"text":"QUIC ― Connection Migration\n\n\n\n                                        QUIC ID:abc\n\n                                            UDP\n\n                                                                                       ID:abc  QUIC\n               111.333.22.1:65432                                                          UDP\n                                                                Internet\n\n\n\n                                          QUIC  ID:abc\n                                               UDP\n               111.222.33.4:67890\n\n\n\n\n\n                                   QUIC ID:abc                  QUIC  ID:abc\nコネクション                                                                                            コネクション\n                                                   ID:abc  QUIC\n\n\n\n\n\n\n                    IPやポートが変わっても処理を継続できる"},{"image":"/images/slides/introducing-http/s-45.png","width":720,"height":540,"links":[],"text":"HTTP/3\n\n\nQUICを利用した新しいHTTP"},{"image":"/images/slides/introducing-http/s-46.png","width":720,"height":540,"links":[],"text":"2つのQUIC\n\n\n                                  HTTP/3\n       HTTP/2\n             独自\n    QUIC     暗号化               QUIC      TLS\n\n        UDP                        UDP\n         IP                         IP\n\n   Google版QUIC +               IETF版QUIC +\n\n          HTTP/2                     HTTP/3"},{"image":"/images/slides/introducing-http/s-47.png","width":720,"height":540,"links":[],"text":"HTTP/3 ― QUICを利用した新しいHTTP\n\n\n     HTTP/2                  HTTP/3\n\n  バイナリフォーマット              バイナリフォーマット\n\n\n  ヘッダー圧縮（HPACK）          ヘッダー圧縮（QPACK）\n\n   サーバープッシュ               サーバープッシュ\n\n ストリームによる多重化\n                             QUIC\n\n                         ストリームによる多重化\n\n                         暗号化、輻輳制御、その他\n\n\n\n    HTTP/2からQUICと重複する機能を除いたもの\n\n         QUICとともにIETFで議論が進んでいる"},{"image":"/images/slides/introducing-http/s-48.png","width":720,"height":540,"links":[],"text":"まとめ"},{"image":"/images/slides/introducing-http/s-49.png","width":720,"height":540,"links":[],"text":"HTTPの歴史（再掲）\n\n\n\n\n\n\n\n\n\n\n\n\n  20年以上Webを支えているHTTP/1.1（もちろん現役）\n\n   HTTPのセマンティックは1.x系から変わっていない"},{"image":"/images/slides/introducing-http/s-50.png","width":720,"height":540,"links":[],"text":"HTTPの進化は「水面下」で\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Webを支えるHTTPのこれからに注目！"},{"image":"/images/slides/introducing-http/s-51.png","width":720,"height":540,"links":[{"rect":[67.44,368.62,409.03,384.46],"url":"https://tools.ietf.org/html/draft-ietf-quic-http-27"},{"rect":[67.44,317.59,444.79,333.43],"url":"https://tools.ietf.org/html/draft-ietf-quic-transport-27"},{"rect":[67.44,266.47,395.81,282.31],"url":"https://tools.ietf.org/html/draft-ietf-quic-tls-27"},{"rect":[67.44,215.33,304.01,231.17],"url":"https://tools.ietf.org/html/rfc7540"},{"rect":[67.44,164.45,182.66,180.05],"url":"https://hpbn.co/"},{"rect":[67.44,113.18,477.07,129.05],"url":"https://www.iij.ad.jp/dev/tech/techweek/pdf/151111_4.pdf"},{"rect":[67.44,64.704,653.5,78.624],"url":"https://docs.google.com/presentation/d/1OASDYIJlgSFg6hRkUjqdKfYTK1ZUk5VMGP3Iv2zQCI8"}],"text":"最後までご視聴ありがとうございました。\n参考資料\n                                  質問：#CAMPHOR_Day, YouTubeコメント\n\n\n\n\n   https://tools.ietf.org/html/draft-ietf-quic-http-27\n\n\n   https://tools.ietf.org/html/draft-ietf-quic-transport-27\n\n   https://tools.ietf.org/html/draft-ietf-quic-tls-27\n\n\n   https://tools.ietf.org/html/rfc7540\n\n\n   https://hpbn.co/\n\n\n   https://www.iij.ad.jp/dev/tech/techweek/pdf/151111_4.pdf\n\n   https://docs.google.com/presentation/d/1OASDYIJlgSFg6hRkUjqdKfYTK1ZUk5VMGP3Iv2zQCI8"}],"date":"2020-03-29","pdf":"/slides/2020-03-29-introducing-http.pdf"}